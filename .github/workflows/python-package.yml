# GitHub Actions workflow for eiplgrader
# Comprehensive CI pipeline for Python package

name: eiplgrader CI

on:
  push:
    branches: [ "master", "main", "major-refactor" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          pyproject.toml
          poetry.lock
    
    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install poetry
        poetry install --with dev

    - name: Lint with pylint
      run: |
        pylint --disable=C0111,C0103,E0401,R0913,R0917,R0914,C0301 eiplgrader/* tests/

    - name: Check code formatting with black
      run: |
        black --check eiplgrader/ tests/
      continue-on-error: false

    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports eiplgrader/

    - name: Run tests with pytest and coverage
      run: |
        pytest --cov=eiplgrader tests/ --cov-report=xml --cov-report=term
        echo "### Test Results ðŸ§ª" >> $GITHUB_STEP_SUMMARY
        echo "Python ${{ matrix.python-version }} tests completed successfully" >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel poetry
    
    - name: Build package
      run: |
        poetry build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30
        if-no-files-found: error

  docs:
    name: Validate documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev
    
    - name: Check README and docs
      run: |
        echo "### Documentation Check ðŸ“š" >> $GITHUB_STEP_SUMMARY
        if [ -f README.md ]; then
          echo "âœ“ README.md exists" >> $GITHUB_STEP_SUMMARY
        else
          echo "âœ— README.md missing" >> $GITHUB_STEP_SUMMARY
        fi
        # Add more doc validation as needed

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, build]
    # Only publish when:
    # 1. It's a tag push (v*)
    # 2. The tag was created on the master branch
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to check branch

      # This step verifies the tag is on the master branch
      - name: Check if tag is on master
        id: check_tag_branch
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          COMMIT_SHA=$(git rev-list -n 1 $TAG_NAME)
          BRANCH=$(git branch -r --contains $COMMIT_SHA | grep "origin/master" || echo "")
          if [[ -n "$BRANCH" ]]; then
            echo "Tag is on master branch"
            echo "on_master=true" >> $GITHUB_OUTPUT
          else
            echo "Tag is NOT on master branch"
            echo "on_master=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Python
        if: steps.check_tag_branch.outputs.on_master == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Download built package
        if: steps.check_tag_branch.outputs.on_master == 'true'
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to PyPI
        if: steps.check_tag_branch.outputs.on_master == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
