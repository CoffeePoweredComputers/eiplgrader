name: Comprehensive Test Suite

on:
  push:
    branches: [ master, multilanguage-support ]
  pull_request:
    branches: [ master ]

jobs:
  test-comprehensive:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        test-category: ["type-system", "infrastructure", "edge-cases"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc g++ \
          openjdk-11-jdk \
          golang-go \
          ghc \
          nodejs npm
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run comprehensive test suite - ${{ matrix.test-category }}
      run: |
        python tests/test_comprehensive_suite.py --category=${{ matrix.test-category }} --verbose
    
    - name: Generate coverage report
      if: matrix.test-category == 'type-system'
      run: |
        python -m pytest tests/ --cov=eiplgrader --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      if: matrix.test-category == 'type-system'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-full-suite:
    runs-on: ubuntu-latest
    needs: test-comprehensive
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc g++ \
          openjdk-11-jdk \
          golang-go \
          ghc \
          nodejs npm
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run full comprehensive test suite
      run: |
        python tests/test_comprehensive_suite.py --full-suite
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v
    
    - name: Validate test suite completeness
      run: |
        python -c "
        import subprocess
        import sys
        
        # Count test files created by agents
        result = subprocess.run(['find', 'tests/', '-name', 'test_*.py', '-type', 'f'], 
                              capture_output=True, text=True)
        test_files = result.stdout.strip().split('\n')
        test_count = len([f for f in test_files if f.strip()])
        
        print(f'Total test files: {test_count}')
        
        # Validate minimum expected test coverage
        if test_count < 15:
            print(f'Error: Expected at least 15 test files, found {test_count}')
            sys.exit(1)
            
        print('âœ“ Test suite completeness validation passed')
        "

  lint-and-type-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install black pylint mypy
    
    - name: Run linting and type checks
      run: |
        # Run the existing lint script if available
        if [ -f lint.sh ]; then
          chmod +x lint.sh
          ./lint.sh
        else
          # Fallback to individual tools
          black --check eiplgrader/ tests/
          pylint eiplgrader/ tests/
          mypy eiplgrader/
        fi