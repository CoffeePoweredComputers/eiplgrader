name: Comprehensive Test Suite

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test-comprehensive:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        test-category: ["type-system", "infrastructure", "edge-cases"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gcc g++ \
          openjdk-11-jdk \
          golang-go \
          ghc \
          nodejs npm
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache system packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/comprehensive-tests.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run comprehensive test suite - ${{ matrix.test-category }}
      run: |
        python tests/test_comprehensive_suite.py --category=${{ matrix.test-category }} --verbose
        echo "### Test Results - ${{ matrix.test-category }} ðŸ§ª" >> $GITHUB_STEP_SUMMARY
        echo "Python ${{ matrix.python-version }} - ${{ matrix.test-category }} tests completed" >> $GITHUB_STEP_SUMMARY
    
    - name: Generate coverage report
      if: matrix.test-category == 'type-system'
      run: |
        python -m pytest tests/ --cov=eiplgrader --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      if: matrix.test-category == 'type-system'
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  test-full-suite:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: test-comprehensive
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          gcc g++ \
          openjdk-11-jdk \
          golang-go \
          ghc \
          nodejs npm
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run full comprehensive test suite
      run: |
        python tests/test_comprehensive_suite.py --full-suite
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v
    
    - name: Validate test suite completeness
      run: |
        python -c "
        import subprocess
        import sys
        
        # Count test files created by agents
        result = subprocess.run(['find', 'tests/', '-name', 'test_*.py', '-type', 'f'], 
                              capture_output=True, text=True)
        test_files = result.stdout.strip().split('\n')
        test_count = len([f for f in test_files if f.strip()])
        
        print(f'Total test files: {test_count}')
        
        # Validate minimum expected test coverage
        if test_count < 15:
            print(f'Error: Expected at least 15 test files, found {test_count}')
            sys.exit(1)
            
        print('âœ“ Test suite completeness validation passed')
        "
    
    - name: Performance benchmark
      run: |
        echo "### Performance Metrics ðŸ“ˆ" >> $GITHUB_STEP_SUMMARY
        start_time=$(date +%s)
        python -c "import time; time.sleep(1)"  # Placeholder for actual benchmark
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        echo "**Test suite duration:** ${duration}s" >> $GITHUB_STEP_SUMMARY

  lint-and-type-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install black pylint mypy
    
    - name: Run linting and type checks
      run: |
        # Run the existing lint script if available
        if [ -f lint.sh ]; then
          chmod +x lint.sh
          ./lint.sh
        else
          # Fallback to individual tools
          black --check eiplgrader/ tests/
          pylint eiplgrader/ tests/
          mypy eiplgrader/
        fi