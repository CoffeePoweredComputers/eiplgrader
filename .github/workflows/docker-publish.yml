name: Docker Build and Publish

on:
  push:
    branches: [ "master", "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker images
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        language: [python, javascript, java, cpp, c, go, haskell]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.language }}
            type=raw,value=${{ matrix.language }}-{{sha}}
            type=raw,value=${{ matrix.language }}-{{branch}}

      - name: Build and push Docker image (${{ matrix.language }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.${{ matrix.language }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.language }}
          cache-to: type=gha,mode=max,scope=${{ matrix.language }}
          sbom: true
          provenance: true
      
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Generate build summary
        if: github.event_name != 'pull_request'
        run: |
          echo "### Docker Build Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**SBOM:** Generated" >> $GITHUB_STEP_SUMMARY
          echo "**Provenance:** Generated" >> $GITHUB_STEP_SUMMARY

  # Additional job to push to Docker Hub
  docker-hub:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: build
    if: github.event_name == 'push'
    strategy:
      matrix:
        language: [python, javascript, java, cpp, c, go, haskell]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: coffeepwrdcomputers/eiplgrader
          tags: |
            type=raw,value=${{ matrix.language }}
            type=raw,value=${{ matrix.language }}-{{sha}}
            type=raw,value=${{ matrix.language }}-{{branch}}
            type=semver,pattern=${{ matrix.language }}-{{version}},enable={{is_default_branch}}
            type=semver,pattern=${{ matrix.language }}-{{major}}.{{minor}},enable={{is_default_branch}}

      - name: Build and push Docker image (${{ matrix.language }})
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.${{ matrix.language }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.language }}
          cache-to: type=gha,mode=max,scope=${{ matrix.language }}
          sbom: true
          provenance: true

  # Create 'latest' tag pointing to Python version
  latest-tag:
    name: Tag Python as latest
    runs-on: ubuntu-latest
    needs: docker-hub
    if: github.event_name == 'push'
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Tag Python image as latest
        run: |
          docker buildx imagetools create \
            coffeepwrdcomputers/eiplgrader:python \
            --tag coffeepwrdcomputers/eiplgrader:latest