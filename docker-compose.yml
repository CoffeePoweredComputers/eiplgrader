version: '3.8'

services:
  # Python-only base image (~100MB)
  grader-python:
    build:
      context: .
      dockerfile: Dockerfile.base
    image: eiplgrader:python
    container_name: eiplgrader-python
    environment: &common-env
      - API_KEY
      - STUDENT_RESPONSE
      - TEST_CASES
      - LANGUAGE
      - FUNCTION_NAME
      - MODEL
      - CLIENT_TYPE
      - GEN_TYPE=${GEN_TYPE:-cgbg}
      - NUM_GENERATIONS=${NUM_GENERATIONS:-1}
      - TEMPERATURE=${TEMPERATURE:-0.0}
      - SEGMENTATION=${SEGMENTATION:-no}
      - SEGMENTATION_FILE=${SEGMENTATION_FILE:-}
      - INPLACE_MODE=${INPLACE_MODE:-0}
      - PARAMS=${PARAMS:-}
      - ASSUMPTIONS=${ASSUMPTIONS:-}
    deploy: &common-deploy
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    security_opt: &common-security
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    network_mode: none
    user: grader
    
  # Language-specific services
  grader-java:
    build:
      context: .
      dockerfile: Dockerfile.java
    image: eiplgrader:java
    container_name: eiplgrader-java
    environment: *common-env
    deploy: *common-deploy
    security_opt: *common-security
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    network_mode: none
    user: grader
    
  grader-go:
    build:
      context: .
      dockerfile: Dockerfile.go
    image: eiplgrader:go
    container_name: eiplgrader-go
    environment: *common-env
    deploy: *common-deploy
    security_opt: *common-security
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    network_mode: none
    user: grader
    
  grader-cpp:
    build:
      context: .
      dockerfile: Dockerfile.cpp
    image: eiplgrader:cpp
    container_name: eiplgrader-cpp
    environment: *common-env
    deploy: *common-deploy
    security_opt: *common-security
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    network_mode: none
    user: grader
    
  grader-javascript:
    build:
      context: .
      dockerfile: Dockerfile.javascript
    image: eiplgrader:javascript
    container_name: eiplgrader-javascript
    environment: *common-env
    deploy: *common-deploy
    security_opt: *common-security
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    network_mode: none
    user: grader
    
  grader-haskell:
    build:
      context: .
      dockerfile: Dockerfile.haskell
    image: eiplgrader:haskell
    container_name: eiplgrader-haskell
    environment: *common-env
    deploy: *common-deploy
    security_opt: *common-security
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    network_mode: none
    user: grader

  # Example Django integration service
  django-example:
    image: python:3.13-alpine
    container_name: django-grader-example
    volumes:
      - ./docs/DOCKER_DJANGO_INTEGRATION_PLAN.md:/app/integration.md:ro
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DJANGO_SETTINGS_MODULE=example.settings
      - EIPLGRADER_API_KEY=${API_KEY}
    command: |
      sh -c "echo 'Django integration example - see /app/integration.md for details'"
    depends_on:
      - grader-python

  # Redis for async task queue (Django Celery example)
  redis:
    image: redis:7-alpine
    container_name: grader-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 256M

# Example environment file (.env):
# API_KEY=your-api-key
# STUDENT_RESPONSE="that adds two numbers and returns the result"
# TEST_CASES='[{"parameters": {"a": 1, "b": 2}, "expected": 3}]'
# LANGUAGE=python
# FUNCTION_NAME=add_numbers
# MODEL=gpt-4
# CLIENT_TYPE=openai