{
  "multistructural": {
    "description": "I start with the full array, then I make multiple passes through the array, in each pass I compare adjacent elements and swap them if they're in wrong order, after each pass the largest element bubbles to the end, I continue until no more swaps are needed, then return the sorted array.",
    "segmentation": [
      {
        "code": "def bubble_sort(arr):",
        "explanation_portion": "I start with the full array"
      },
      {
        "code": "    n = len(arr)\n    for i in range(n):",
        "explanation_portion": "then I make multiple passes through the array"
      },
      {
        "code": "        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]",
        "explanation_portion": "in each pass I compare adjacent elements and swap them if they're in wrong order"
      },
      {
        "code": "        # After each pass, largest element is at the end",
        "explanation_portion": "after each pass the largest element bubbles to the end"
      },
      {
        "code": "        swapped = False\n        # ... swapping logic ...\n        if not swapped:\n            break",
        "explanation_portion": "I continue until no more swaps are needed"
      },
      {
        "code": "    return arr",
        "explanation_portion": "then return the sorted array"
      }
    ]
  },
  "relational": {
    "description": "The function implements the bubble sort algorithm",
    "segmentation": [
      {
        "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n    return arr",
        "explanation_portion": "The function implements the bubble sort algorithm"
      }
    ]
  }
}